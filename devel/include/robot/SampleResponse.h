// Generated by gencpp from file robot/SampleResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_MESSAGE_SAMPLERESPONSE_H
#define ROBOT_MESSAGE_SAMPLERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot
{
template <class ContainerAllocator>
struct SampleResponse_
{
  typedef SampleResponse_<ContainerAllocator> Type;

  SampleResponse_()
    : angle_from_robot(0.0)
    , distance(0.0)
    , sample_not_found(false)
    , sample_angle_conf(false)  {
    }
  SampleResponse_(const ContainerAllocator& _alloc)
    : angle_from_robot(0.0)
    , distance(0.0)
    , sample_not_found(false)
    , sample_angle_conf(false)  {
    }



   typedef float _angle_from_robot_type;
  _angle_from_robot_type angle_from_robot;

   typedef float _distance_type;
  _distance_type distance;

   typedef uint8_t _sample_not_found_type;
  _sample_not_found_type sample_not_found;

   typedef uint8_t _sample_angle_conf_type;
  _sample_angle_conf_type sample_angle_conf;




  typedef boost::shared_ptr< ::robot::SampleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot::SampleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SampleResponse_

typedef ::robot::SampleResponse_<std::allocator<void> > SampleResponse;

typedef boost::shared_ptr< ::robot::SampleResponse > SampleResponsePtr;
typedef boost::shared_ptr< ::robot::SampleResponse const> SampleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot::SampleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot::SampleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robot': ['/home/buckeye/catkin_ws/src/CapstoneROS/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot::SampleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot::SampleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot::SampleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot::SampleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot::SampleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot::SampleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot::SampleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f47f20f3085b0c4c42ff4a174efe2a9d";
  }

  static const char* value(const ::robot::SampleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf47f20f3085b0c4cULL;
  static const uint64_t static_value2 = 0x42ff4a174efe2a9dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot::SampleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot/SampleResponse";
  }

  static const char* value(const ::robot::SampleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot::SampleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle_from_robot\n\
float32 distance\n\
bool sample_not_found\n\
bool sample_angle_conf\n\
";
  }

  static const char* value(const ::robot::SampleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot::SampleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_from_robot);
      stream.next(m.distance);
      stream.next(m.sample_not_found);
      stream.next(m.sample_angle_conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SampleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot::SampleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot::SampleResponse_<ContainerAllocator>& v)
  {
    s << indent << "angle_from_robot: ";
    Printer<float>::stream(s, indent + "  ", v.angle_from_robot);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "sample_not_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sample_not_found);
    s << indent << "sample_angle_conf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sample_angle_conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MESSAGE_SAMPLERESPONSE_H
