# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot/BeaconResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BeaconResponse(genpy.Message):
  _md5sum = "b0418911b827747ed56cc16bc2cb6af6"
  _type = "robot/BeaconResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 angle_from_robot
float32 x
float32 y
bool only_bottom
bool beacon_not_found
bool beacon_angle_conf
"""
  __slots__ = ['angle_from_robot','x','y','only_bottom','beacon_not_found','beacon_angle_conf']
  _slot_types = ['float32','float32','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       angle_from_robot,x,y,only_bottom,beacon_not_found,beacon_angle_conf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BeaconResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.angle_from_robot is None:
        self.angle_from_robot = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.only_bottom is None:
        self.only_bottom = False
      if self.beacon_not_found is None:
        self.beacon_not_found = False
      if self.beacon_angle_conf is None:
        self.beacon_angle_conf = False
    else:
      self.angle_from_robot = 0.
      self.x = 0.
      self.y = 0.
      self.only_bottom = False
      self.beacon_not_found = False
      self.beacon_angle_conf = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f3B.pack(_x.angle_from_robot, _x.x, _x.y, _x.only_bottom, _x.beacon_not_found, _x.beacon_angle_conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.angle_from_robot, _x.x, _x.y, _x.only_bottom, _x.beacon_not_found, _x.beacon_angle_conf,) = _struct_3f3B.unpack(str[start:end])
      self.only_bottom = bool(self.only_bottom)
      self.beacon_not_found = bool(self.beacon_not_found)
      self.beacon_angle_conf = bool(self.beacon_angle_conf)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f3B.pack(_x.angle_from_robot, _x.x, _x.y, _x.only_bottom, _x.beacon_not_found, _x.beacon_angle_conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.angle_from_robot, _x.x, _x.y, _x.only_bottom, _x.beacon_not_found, _x.beacon_angle_conf,) = _struct_3f3B.unpack(str[start:end])
      self.only_bottom = bool(self.only_bottom)
      self.beacon_not_found = bool(self.beacon_not_found)
      self.beacon_angle_conf = bool(self.beacon_angle_conf)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f3B = struct.Struct("<3f3B")
